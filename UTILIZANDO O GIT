# COMANDO DE VERIFICAR OS ARQUIVOS
git init

#Precisa existir uma pasta dentro da pasta ja de alguma forma, pois o git exige = ele Recomenda o ARQUIVO reame.md
git add README.md

# UMtiliza o comando abaixo que Adiciona tudo oque tiver de novo na pasta
git add .

# OUY Utiliza git add e o nome ESPECIFICO do arquivo
git add README.md

#Gerar a versao em si pelo Comando commit, preparar a versao para ser enviada.
git commit -m "Primeiro Envio para o GITHUB"

#MUDAR O NOME DA BRANCH... para MAIN... boas práticas indicam fazer isso, porque a BRANCH do  nosso computador é MASTER
git branch -M main

#Informar qual repositorio no GITHUB vou salvar
git remote add origin https://github.com/CONSULTORH3M/git.git

#AGORA SIM, É A HORA DE ENVIAR PARA O GITHUB na nuvem
git push -u origin main

#####################################################################################################################
#Comando para ver como está os arquivos
git status

#Comando para ver as versoes do  GIT as....
git log
git reflog

# CONFIGURAÇAO DO GIT GLOBAL NA SUA MAQUINA, PARA TER UM REGISTRO DE QUEM TÁ GRAVANDO, NÃO PRECISA SER DA CONTAO DO GITHUB
git config --global user.email "consultorh3m@gmail.com"
git config --global user.name "Glaucio"


# antes de fazer o MARGE... TEM QUE fazer o git pull para buscar qualquer atualizaçao que tiver sido enviado
git pull
# COMANDO PARA JUNTAR AS branchs é um COISA IMPORTANTE
git merge "qual branch puxar"

# CLONAR UM PROJETO QUE TÁ NO GITHUB
git clone

# PARA ATUALIZAR OQUE FOI MEXIDO NO MESMO CODIGO - puxa para sua máquina apenas.. ele puxa para meu GITHUB
git pull

# MAS TEM PULL REQUEST.. que é enviar para quem tu fez o pull
git request

#INGNORANDO ARQUIVOS QUE NAO QUER SER ADICIONANDO AO CONTROLE DE versao
touch .gitignore

# voltando versao
git reset --hard "numero da hast"

# PARA FAZER O FORK.. ele repassa para o nosso..

for



